service: ${file(../config.cjs):config.serviceName}-auth
frameworkVersion: "3"

plugins:
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs20.x
  region: ${file(../config.cjs):config.region}
  stage: ${file(../config.cjs):config.stage}
  tracing:
    apiGateway: true
    lambda: true
  environment:
    LOG_LEVEL: debug
    TABLE_NAME: !Ref Table
    POWERTOOLS_SERVICE_NAME: auth
    POWERTOOLS_METRICS_NAMESPACE: auth
    BASE_URL: https://${self:custom.domainName}
    API_BASE_URL: https://${self:custom.apiDomainName}
    USER_POOL_DOMAIN: ${self:custom.userPoolDomain}
    STAGE: ${sls:stage}

custom:
  domainName: ${file(../config.cjs):config.domain}
  apiDomainName: api.${self:custom.domainName}
  userPoolDomain: auth.${self:custom.domainName}
  domainHostedZoneId: ${ssm(us-east-1):/weshare/${sls:stage}/domainHostedZone}
  authDomainCertArn: ${ssm(us-east-1):/weshare/${sls:stage}/authDomainCertArn}
  # The Hosted Zone for CloudFront distributions is always this value
  # See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html
  cloudFrontHostedZoneId: Z2FDTNDATAQYW2

functions:
  createDeviceAuthorizationRequest:
    handler: device-auth-handler.handleEvent
    events:
      - httpApi:
          method: POST
          path: "/device_authorization"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource:
          - !GetAtt Table.Arn

  verifyDeviceAuthorizationRequest:
    handler: code-verification-handler.handleEvent
    events:
      - httpApi:
          method: GET
          path: "/verify"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource:
          - !GetAtt Table.Arn
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - !Sub "${Table.Arn}/*"
    environment:
      CLIENT_ID: !Ref UserPoolClient

  processIdpCallback:
    handler: idp-callback-handler.handleEvent
    events:
      - httpApi:
          method: GET
          path: "/callback"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource:
          - !GetAtt Table.Arn
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - !Sub "${Table.Arn}/*"

  retrieveToken:
    handler: token-handler.handleEvent
    events:
      - httpApi:
          method: POST
          path: "/token"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource:
          - !GetAtt Table.Arn
    environment:
      CLIENT_ID: !Ref UserPoolClient

  cognitoCustomMessage:
    handler: cognito-custom-message.handler
    description: Send Cognito custom email message with third-party ESP
    environment:
      KEY_ALIAS: !Ref CustomEmailKeyAlias
      KEY_ARN: !GetAtt CustomEmailKey.Arn
    iamRoleStatements:
      - Effect: Allow
        Action:
          - kms:Decrypt
        Resource:
          - !GetAtt CustomEmailKey.Arn
      - Effect: Allow
        Action:
          - ssm:GetParameter
          - ssm:GetParameters
        Resource:
          - arn:aws:ssm:${aws:region}:${aws:accountId}:parameter/weshare/${sls:stage}/mailgunApiKey


resources:
  Resources:
    CustomDomainPathMapping:
      Type: AWS::ApiGatewayV2::ApiMapping
      Properties:
        ApiId: !Ref HttpApi
        ApiMappingKey: "auth"
        DomainName: ${self:custom.apiDomainName}
        Stage: !Ref HttpApiStage

    CustomEmailKey:
      Type: AWS::KMS::Key
      Properties:
        Description: Symmetric key for Cognito custom emails
        Enabled: true
        EnableKeyRotation: false
        KeySpec: SYMMETRIC_DEFAULT
        MultiRegion: false
        PendingWindowInDays: 7
    
    CustomEmailKeyAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName: alias/custom-email-sender
        TargetKeyId: !GetAtt CustomEmailKey.Arn

    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${file(../config.cjs):config.serviceName}-user-pool-${sls:stage}
        UsernameAttributes: [email]
        AutoVerifiedAttributes: [email]
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: true
        Policies:
          PasswordPolicy:
            MinimumLength: 12
            RequireLowercase: false
            RequireUppercase: false
            RequireNumbers: false
            RequireSymbols: false
        AccountRecoverySetting:
          RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
        EmailConfiguration:
          EmailSendingAccount: COGNITO_DEFAULT
        VerificationMessageTemplate:
          DefaultEmailOption: CONFIRM_WITH_CODE
        MfaConfiguration: "OFF"
        LambdaConfig:
          KMSKeyID: !GetAtt CustomEmailKey.Arn
          CustomEmailSender:
            LambdaArn: !GetAtt CognitoCustomMessageLambdaFunction.Arn
            LambdaVersion: V1_0
        Schema:
          - AttributeDataType: String
            Mutable: true
            Name: tenant
            StringAttributeConstraints:
              MinLength: '2'
              MaxLength: '16'
          - AttributeDataType: String
            Mutable: true
            Name: tier
            StringAttributeConstraints:
              MinLength: '2'
              MaxLength: '16'

    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: user-pool-client-${sls:stage}
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_ADMIN_USER_PASSWORD_AUTH
        RefreshTokenValidity: 30
        SupportedIdentityProviders:
          - COGNITO
        WriteAttributes:
          - email
        CallbackURLs:
          - https://${self:custom.apiDomainName}/auth/callback
        DefaultRedirectURI: https://${self:custom.apiDomainName}/auth/callback
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthFlows:
          - code
        AllowedOAuthScopes:
          - openid
        UserPoolId: !Ref UserPool

    UserPoolDomain:  
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: ${self:custom.userPoolDomain}
        UserPoolId: !Ref UserPool
        CustomDomainConfig:
          CertificateArn: ${self:custom.authDomainCertArn}

    DomainRecordSet:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneId: ${self:custom.domainHostedZoneId}
        RecordSets:
          - Name: ${self:custom.userPoolDomain}
            Type: A
            AliasTarget:
              DNSName: !GetAtt UserPoolDomain.CloudFrontDistribution
              HostedZoneId: ${self:custom.cloudFrontHostedZoneId}
          - Name: ${self:custom.userPoolDomain}
            Type: AAAA
            AliasTarget:
              DNSName: !GetAtt UserPoolDomain.CloudFrontDistribution
              HostedZoneId: ${self:custom.cloudFrontHostedZoneId}

    # UserPoolUICustomization:
    #   # When using a custom domain for the Cognito UserPoolDomain, we get this error back from CloudFormation:
    #   # "The domain auth.wsh.codespyre.com associated with this user pool is currently not Active."
    #   Type: AWS::Cognito::UserPoolUICustomizationAttachment
    #   Properties:
    #     ClientId: !Ref UserPoolClient
    #     CSS: ${file(./user-pool-css.cjs)}
    #     UserPoolId: !Ref UserPool

    UserPoolId:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /weshare/${sls:stage}/userPoolId
        Type: String
        Value: !Ref UserPool

    UserPoolClientId:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /weshare/${sls:stage}/userPoolClientId
        Type: String
        Value: !Ref UserPoolClient

    Table:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S 
          - AttributeName: sk
            AttributeType: S 
          - AttributeName: gsi1pk
            AttributeType: S 
          - AttributeName: gsi1sk
            AttributeType: S 
          - AttributeName: gsi2pk
            AttributeType: S 
          - AttributeName: gsi2sk
            AttributeType: S
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        SSESpecification:
          SSEEnabled: true
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        TimeToLiveSpecification:
          AttributeName: expiration
          Enabled: true
        GlobalSecondaryIndexes:
          - IndexName: gsi1
            KeySchema:
              - AttributeName: gsi1pk
                KeyType: HASH
              - AttributeName: gsi1sk
                KeyType: RANGE
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
            Projection:
              ProjectionType: ALL
          - IndexName: gsi2
            KeySchema:
              - AttributeName: gsi2pk
                KeyType: HASH
              - AttributeName: gsi2sk
                KeyType: RANGE
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
            Projection:
              ProjectionType: ALL

    CognitoCustomMessagePermission:
      Type: AWS::Lambda::Permission
      DependsOn:
      - CognitoCustomMessageLambdaFunction
      - UserPool
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: 
          Ref: CognitoCustomMessageLambdaFunction
        Principal: cognito-idp.amazonaws.com
        SourceArn: 
          Fn::GetAtt: 
            - UserPool
            - Arn