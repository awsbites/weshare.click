service: ${file(../config.cjs):config.serviceName}-domain
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs16.x
  stage: ${file(../config.cjs):config.stage}
  region: ${file(../config.cjs):config.region}

plugins:
  - serverless-iam-roles-per-function

custom:
  domainName: ${file(../config.cjs):config.domain}

resources:
  Resources:
    PublicHostedZone:
      Type: AWS::Route53::HostedZone
      Properties:
        Name: ${self:custom.domainName}

    DomainCert:
      Type: AWS::CertificateManager::Certificate
      Properties:
        DomainName: ${self:custom.domainName}
        ValidationMethod: DNS
        DomainValidationOptions:
          - DomainName: ${self:custom.domainName}
            HostedZoneId: !Ref PublicHostedZone

    ApiCustomDomain:
      Type: AWS::ApiGatewayV2::DomainName
      Properties:
        DomainName: ${self:custom.domainName}
        DomainNameConfigurations:
          - CertificateArn: !Ref DomainCert

    DomainRecordSet:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneId: !Ref PublicHostedZone
        RecordSets:
          - Name: ${self:custom.domainName}
            Type: A
            AliasTarget:
              DNSName: !GetAtt ApiCustomDomain.RegionalDomainName
              HostedZoneId: !GetAtt ApiCustomDomain.RegionalHostedZoneId
          - Name: ${self:custom.domainName}
            Type: AAAA
            AliasTarget:
              DNSName: !GetAtt ApiCustomDomain.RegionalDomainName
              HostedZoneId: !GetAtt ApiCustomDomain.RegionalHostedZoneId

    DomainHostedZoneParameter:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /weshare/${sls:stage}/domainHostedZone
        Type: String
        Value: !Ref PublicHostedZone